
async function fillReport(){

    // Fetch data from main script.
    const data = await window.electron.getReportData();
    const cameras = await window.electron.getCameras();

    
    const date = document.getElementById('report-date')
    date.innerText = `${data.date}`

    const activeCams = document.getElementById('active-cameras')
    activeCams.innerText = cameras.length

    const detectionsNum = document.getElementById('detections-num')
    detectionsNum.innerText = data.detectionNumber

    const alerts = document.getElementById('alert-count')
    alerts.innerText = data.alertCount

    if(data.detectionSummary && data.detectionSummary != ''){
        const summary = document.getElementById('summary-text')
        summary.innerText=data.detectionSummary;
    } else { 
        document.getElementById('detection-sum').remove();
    }


    const cameraTable = document.getElementById('camera-table-body')
    cameraTable.innerHTML = ''
    for(const camera of cameras){
        const row = document.createElement('tr')
        let status =''

        const isOnline = await checkCameraOnline(camera)

        if(isOnline){
            camera.status = 'online'
            status = 'status-good'
        } else {
            status = 'status-error'
            camera.status = 'offline'
        }
        
        row.innerHTML = `                        
            <td>${camera.id}</td>
            <td>${camera.description}</td>
            <td><span class="${status}">‚óè</span> ${camera.status}</td>
        `

        cameraTable.appendChild(row)
    }

    const alertList = document.getElementById('alerts')

    for(const alert of data.recentAlerts){
        const li = document.createElement('li')
        li.innerHTML=`[${new Date(alert.timestamp).toLocaleTimeString()}] ${alert.object} detected at ${alert.camera} (conf: ${alert.confidence})`
        
        alertList.appendChild(li);
    }


    const footer = document.getElementById('footer')
    footer.innerHTML = `
    <p>This security report was automatically generated by SignalGeneriX on ${data.dateAndTime}</p>
    <p>For security concerns or technical support, contact: ${data.contactInfo}</p>
    `

    window.dispatchEvent(new CustomEvent('reportReady'));
}


function checkCameraOnline(camera){
    if(camera.type === 'ip')
        return checkIPCameraOnline(camera)
    else if(camera.type === 'youtube')
        return checkYouTubeOnline(camera)

    return Promise.resolve(false)
}

function checkIPCameraOnline(camera){
    return new Promise((resolve) => {
        const img = new Image();

        const timeout = setTimeout(() => {
            img.src = '';
            resolve(false)
        }, 5000);

        img.onload = () => {
            clearTimeout(timeout)
            resolve(true)
        }

        img.onerror = () => {
            clearTimeout(timeout)
            resolve(false)
        }

        img.src = camera.source;
    })
}

function checkYouTubeOnline(camera){
    return new Promise((resolve) => {
        const iframe = document.createElement('iframe')
        iframe.src = camera.source
        iframe.style.display = 'none'

        const timeout = setTimeout(() => {
            if(iframe.parentNode){
                iframe.parentNode.removeChild(iframe)
            }
            resolve(false)
        }, 10000)

        iframe.onload = () => {
            clearTimeout(timeout)
            if(iframe.parentNode)
                iframe.parentNode.removeChild(iframe)
            resolve(true)
        }

        iframe.onerror = () => {
            clearTimeout(timeout)
            if(iframe.parentNode)
                iframe.parentNode.removeChild(iframe)
            resolve(false)
        }

        document.body.appendChild(iframe)
    })
}

window.addEventListener('DOMContentLoaded', () => {
  fillReport();
});
